using CodeChangeLib;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security;
using System.Windows;
using System.Windows.Controls;
 
namespace CodeChangeLib
{
    /// <summary>
    /// Interaction logic for CodeGeneratorWPF.xaml
    /// </summary>
    public partial class CodeGenerator : UserControl
    {
        #region EventHandlers
        public event EventHandler<CodeChangeEventArgs> CodeChange;
        #endregion
        
        #region Constructors
        /// <summary>
        /// Constructor
        /// </summary>
        public CodeGenerator()
        {
            InitializeComponent();
        } 
        #endregion

        #region HelperMethods
        /// <summary>
        /// Helper method used for generating the 60 random string formed of 2 random cyrilic letters 
        /// that are generated by this condition: 
        ///     - the first letter is any random cyrilic letter
        ///     - the second letter is any letter at (right of)distance 3 of the first letter
        /// </summary>
        /// <returns>List of 60 two-lettered strings</returns>
        private List<string> GenerateRandomStrings()
        {
            Random random = new Random();
            List<string> strings = new List<string>();

            for (int i = 0; i < 60; i++)
            {
                int firstLetterInt = random.Next(0, 29);
                int secondLetterInt = (firstLetterInt + random.Next(1, 3)) % 30;
                char let1 = (char)('А' + firstLetterInt);
                char let2 = (char)('А' + secondLetterInt);
                string code = let1.ToString() + let2;
                strings.Add(code);
            }
            return strings;
        }

        /// <summary>
        /// Helper method used for displaying string on the GeneratedCodeTextBox
        /// </summary>
        /// <param name="strings"></param>
        private void DisplayStrings(List<string> strings)
        {
            GeneratedCodeTextBox.Text = string.Join(" ", strings);
        } 
        #endregion

        /// <summary>
        /// Method used for signaling that the GeneratedCodeTextBox's content has been changed
        /// </summary>
        /// <param name="e"></param>
        protected virtual void OnCodeChange(CodeChangeEventArgs e)
        {
            CodeChange?.Invoke(this, e);
        }

        #region ButtonClickEvents
        /// <summary>
        /// Method for handling Quit button Click 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void QuitButton_Click(object sender, RoutedEventArgs e)
        {
            Application.Current.Shutdown();
        }

        /// <summary>
        /// Method for hanlding the Clear Input button click
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ClearInput_Click(object sender, RoutedEventArgs e)
        {
            GeneratedCodeTextBox.Clear();
        }

        /// <summary>
        /// Method for handling Generate Random Code button click
        /// </summary>
        /// <param name="sender">The object that was clicked</param>
        /// <param name="e">Event arguments</param>
        private void GenerateRandomCodeButton_Click(object sender, RoutedEventArgs e)
        {
            List<string> strings = GenerateRandomStrings();
            DisplayStrings(strings);

            if (CodeChange != null)
            {
                CodeChangeEventArgs eventArgs = new CodeChangeEventArgs(strings);
                OnCodeChange(eventArgs);
            }
        } 
        #endregion
    }
}



 